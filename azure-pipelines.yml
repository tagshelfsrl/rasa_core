# Docker image
# Build a Docker image to deploy, run, or push to a container registry.
# Add steps that use Docker Compose, tag images, push to a registry, run an image, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- master
- development
- feature/*
- bugfix/*
- hotfix/*

pr:
- master
- develop

pool:
  vmImage: 'Ubuntu-16.04'

variables:
  - group: tagshelf
  - name: imageName
    value: 'tagshelfsrl/rasa_core'

steps:
  # Builds the docker image for all allowed branches
  - script: |
      docker login -u $(registryUser) -p $(registryPass) $(registry)
      docker build -f Dockerfile -t $(imageName) .
    displayName: 'docker build'
  # Tags builded image with the "stable" tag if its "master" branch and push
  - script: docker tag $(imageName) "$(registry)/$(imageName):stable"
    displayName: 'docker tag master as stable'
    condition: and(succeeded(), eq(variables['Build.SourceBranchName'], 'master'))
  - script: |
      docker login -u $(registryUser) -p $(registryPass) $(registry)
      docker push $(registry)/$(imageName):stable
    displayName: 'docker push master as stable'
    condition: and(succeeded(), eq(variables['Build.SourceBranchName'], 'master'))
  # Tags builded image with the "latest" tag if its "development" branch and push
  - script: docker tag $(imageName) "$(registry)/$(imageName):latest"
    displayName: 'docker tag development as latest'
    condition: and(succeeded(), eq(variables['Build.SourceBranchName'], 'development'))
  - script: |
      docker login -u $(registryUser) -p $(registryPass) $(registry)
      docker push $(registry)/$(imageName):latest
    displayName: 'docker push development as latest'
    condition: and(succeeded(), eq(variables['Build.SourceBranchName'], 'development'))
  # Tags builded image with the branchName_commitHash tag if its "master" or "development" branch and push
  - script: docker tag $(imageName) "$(registry)/$(imageName):$(build.SourceBranchName)_$(build.SourceVersion)"
    displayName: 'docker tag branch_version'
    condition: and(succeeded(), or(eq(variables['Build.SourceBranchName'], 'master'), eq(variables['Build.SourceBranchName'], 'development')))
  - script: |
      docker login -u $(registryUser) -p $(registryPass) $(registry)
      docker push $(registry)/$(imageName):$(build.SourceBranchName)_$(build.SourceVersion)
    displayName: 'docker push build'
    condition: and(succeeded(), or(eq(variables['Build.SourceBranchName'], 'master'), eq(variables['Build.SourceBranchName'], 'development')))
